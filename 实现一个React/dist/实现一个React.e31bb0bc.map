{"version":3,"sources":["react.js","react-dom.js","index.js"],"names":["Component","props","state","console","log","createElement","tag","children","attrs","key","render","vnode","container","textNode","document","createTextNode","appendChild","ReactDOM","getElementById"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;IAIaA;;;AAEX,qBAAYC,KAAZ,EAAmB;AAAA;;AAAA,mCADX,EACW;;AACjB;AACA,SAAKA,KAAL,GAAaA,KAAb;AACD;;;;6BAEQC,OAAO;AACd;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,KAAtB;AACD;;;;KAGH;;;;;AACO,IAAMG,aAAa,GAAG,SAAhBA,aAAgB,CAACC,GAAD,EAAkC;AAAA,MAA5BL,KAA4B,uEAApB,EAAoB;;AAAA,oCAAbM,QAAa;AAAbA,IAAAA,QAAa;AAAA;;AAE7D,SAAO;AACLD,IAAAA,GAAG,EAAHA,GADK;AAELE,IAAAA,KAAK,EAAEP,KAAK,CAACO,KAFR;AAGLD,IAAAA,QAAQ,EAARA,QAHK;AAILE,IAAAA,GAAG,EAAER,KAAK,CAACQ,GAAN,IAAa;AAJb,GAAP;AAMD,CARM;;;eAUQ;AACbT,EAAAA,SAAS,EAATA,SADa;AAEbK,EAAAA,aAAa,EAAbA;AAFa;;;;;;;;;;AC5Bf;;;;;AAKA,IAAMK,MAAM,GAAG,SAATA,MAAS,CAACC,KAAD,EAAQC,SAAR,EAAsB;AACnCT,EAAAA,OAAO,CAACC,GAAR,CAAYO,KAAZ,EADmC,CAGnC;;AACA,MAAK,OAAOA,KAAP,KAAiB,QAAjB,IAA6B,OAAOA,KAAP,KAAiB,QAAnD,EAA8D;AAC1D,QAAME,QAAQ,GAAGC,QAAQ,CAACC,cAAT,CAAyBJ,KAAzB,CAAjB;AACA,WAAOC,SAAS,CAACI,WAAV,CAAuBH,QAAvB,CAAP;AACD;AACJ,CARD;;eAUe;AACbH,EAAAA,MAAM,EAANA;AADa;;;;;ACff;;AACA;;;;AAEAO,kBAASP,MAAT,CACE,MADF,EAEEI,QAAQ,CAACI,cAAT,CAAwB,MAAxB,CAFF","file":"实现一个React.e31bb0bc.map","sourceRoot":"..","sourcesContent":["/**\n * @name Component 基类\n * 提供 setState 的方法 用于更新视图\n */\nexport class Component {\n  state = {}\n  constructor(props) {\n    // props 子类 传进来的 props\n    this.props = props\n  }\n\n  setState(state) {\n    // TODO: 使用 new Proxy \n    console.log('state:', state)\n  }\n}\n\n// 创建节点\nexport const createElement = (tag, props = {}, ...children) => {\n\n  return {\n    tag,\n    attrs: props.attrs,\n    children,\n    key: props.key || null\n  }\n}\n\nexport default {\n  Component,\n  createElement\n}","/**\n * ReactDOM 的 render 实现\n * @param {*} vnode jsx 虚拟 node 会转化成 React.createElement()\n * @param {*} container 挂载的节点\n */\nconst render = (vnode, container) => {\n  console.log(vnode)\n\n  // 如果节点是 string 或 number 类型 直接 渲染  \n  if ( typeof vnode === 'string' || typeof vnode === 'number' ) {\n      const textNode = document.createTextNode( vnode );\n      return container.appendChild( textNode );\n    }\n}\n\nexport default {\n  render\n}","import React from './react'\nimport ReactDOM from './react-dom'\n\nReactDOM.render(\n  \"test\",\n  document.getElementById('root')\n)"]}